use std::panic;
use std::ops;

@derive(Eq, Ord)
enum Option[T] {
    Some(T),
    None,
}

impl[T] Option[T] {
    fn unwrap(self) -> T {
        match self {
            Some(val) => val,
            None => panic("Unwrapped None"),
        }
    }

    fn or(self, rhs: Self) -> Option[T] {
        match self {
            Some(val) => Some(val),
            None => rhs,
        }
    }
}

fn main() {
    let w: Option[i32] = Some(5)
    let x: Option[i32] = Option::[i32]::Some(6)
    let y = Some(7)

    let z: i32 = w.or(x).or(y).unwrap()
}

