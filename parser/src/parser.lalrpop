use lexer;
use lexer::TokenType as TT;
use ast;
use ast::Node;
use string_literal::parse_literal;
use std::borrow::Cow;
use std::str::FromStr;
use std::collections::BTreeMap;
use sym::SymTable;
use sym::Sym;
use num_literal::{parse_int, parse_float};

#[LALR]
grammar<'input>(syms: &mut SymTable);

pub seal = Module;

Module: ast::Module = {
    <ModDocComment*> LF* <(<Node<Item>> End*)*> => {
        let (docs, items) = (<>);
        ast::Module {
            docs: docs,
            items: items,
        }
    },
};

Item: ast::Item = {
    Attributes Node<InnerItem> => {
        let (a, i) = (<>);
        ast::Item {
            attributes: a,
            item: i,
        }
    },
};

Attributes: Vec<ast::Node<ast::Attribute>> = {
    (<Node<RootAttribute>> LF+)*,
};

RootAttribute: ast::Attribute = {
    "@" <Attribute> => ast::Attribute::Attribute(<>),
    DocComment => ast::Attribute::Doc(<>),
};

Attribute: ast::AttributeValue = {
    Identifier ("=" <Box<Node<Attribute>>>)? => match (<>) {
        (i, None) => ast::AttributeValue::Id(i),
        (i, Some(v)) => ast::AttributeValue::IdValue(i, v),
    },
    Identifier ("(" <Comma<Node<Attribute>>> ")") => ast::AttributeValue::IdList(<>),
    Node<Literal> => ast::AttributeValue::Literal(<>),
};

InnerItem: ast::ItemKind = {
    UseImport => ast::ItemKind::UseImport(<>),
    Impl => ast::ItemKind::Impl(<>),
    TypeDecl => ast::ItemKind::TypeDecl(<>),
    StructDecl => ast::ItemKind::StructDecl(<>),
    TraitDecl => ast::ItemKind::TraitDecl(<>),
    EnumDecl => ast::ItemKind::EnumDecl(<>),
    Constant => ast::ItemKind::Constant(<>),
    Function => ast::ItemKind::Function(<>),
    ModDecl => ast::ItemKind::ModDecl(<>),
};

UseImport: ast::UseImport = {
    "use" <TypeName> => ast::UseImport {
        base: <>,
        glob: false,
        multi: vec![],
    },
    "use" <TypeName> "." "*" => ast::UseImport {
        base: <>,
        glob: true,
        multi: vec![],
    },
    "use" <TypeName> "." "(" <Comma<Identifier>> ")" => {
        let (b, m) = (<>);
        ast::UseImport {
            base: b,
            glob: false,
            multi: m,
        }
    },
};

ModDecl: ast::ModDecl = {
    "mod" <Identifier> => ast::ModDecl::Import(<>),
    "mod" <Identifier> "{" <Box<Module>> "}" => ast::ModDecl::Inline(<>),
};

ExternImport: ast::ExternImport = {
    "extern" "mod" <Identifier> => ast::ExternImport {
        name: <>,
    },
};

Impl: ast::Impl = {
    "impl" <(<Node<TypeName>> "for")?> <Node<TypeName>> "{" <Node<Module>> "}" => {
        let (t, i, m) = (<>);
        ast::Impl {
            impl_type: i,
            interface: t,
            items: m,
        }
    },
};

TypeDecl: ast::TypeDecl = {
    "type" <Identifier> => ast::TypeDecl {
        name: <>
    },
};

StructDecl: ast::StructDecl = {
    "struct" <Identifier> "{" <StructMembers> "}" => {
        let (name, members) = (<>);
        ast::StructDecl {
            name: name,
            members: members,
        }   
    },
};

StructMembers = LF* <(<Node<StructMember>> "," LF*)*>;

StructMember: ast::StructItem = {
    Attributes Identifier => {
        let (a, n) = (<>);
        ast::StructItem {
            attributes: a,
            name: n,
        }   
    },
};

EnumDecl: ast::EnumDecl = {
    "enum" <Identifier> "{" <EnumItems> "}" => {
        let (name, members) = (<>);
        ast::EnumDecl {
            name: name,
            members: members,
        }   
    },
};

EnumItems = LF* <(<Node<EnumItem>> "," LF*)*>;

EnumItem: ast::EnumItem = {
    Attributes Identifier ("(" <Comma<Identifier>> ")")? => {
        let (attr, name, mem) = (<>);
        ast::EnumItem {
            attributes: attr,
            name: name,
            members: mem,
        }   
    },
};

TraitDecl: ast::TraitDecl = {
    "trait" <Identifier> "{" <TraitItems> "}" => {
        let (name, members) = (<>);
        ast::TraitDecl {
            name: name,
            members: members,
        }
    },
};

TraitItems = LF* <(<Node<TraitItem>> End*)*>;

TraitItem: ast::TraitItem = {
    <Attributes> "fn" <Identifier> "(" <Comma<Identifier>> ")" => {
        let (a, n, p) = (<>);
        ast::TraitItem {
            attributes: a,
            name: n,
            kind: ast::TraitItemKind::Function(p),
        }
    },
    <Attributes> "const" <Identifier> => {
        let (a, n) = (<>);
        ast::TraitItem {
            attributes: a,
            name: n,
            kind: ast::TraitItemKind::Constant
        }
    },
};

Constant: ast::Constant = {
    "const" <Identifier> "=" <Expression> End => {
        let (name, expr) = (<>);
        ast::Constant {
            name: name,
            expression: expr,
        }
    },
};

Function: ast::Function = {
    "fn" <Identifier> "(" <Comma<Identifier>> ")" <"?"?> <@R> <Scope> => {
        let (n, p, t, e, s) = (<>);
        ast::Function {
            name: n,
            parameters: p,
            throws: t.is_some(),
            body: s,
            decl_end: e,
        }
    },
    "fn" "new" "(" <Comma<Identifier>> ")" <"?"?> <@R> <Scope> => {
        let (p, t, e, s) = (<>);
        ast::Function {
            name: syms.intern("new"),
            parameters: p,
            throws: t.is_some(),
            body: s,
            decl_end: e,
        }
    },
};

Scope = Node<ScopeInner>;

ScopeInner: ast::Scope = {
    "{" <(<Statement> End)*> <Statement?> "}" => {
        let (mut v, e) = (<>);
        match e {
            Some(e) => v.push(e),
            None => (),
        }
        ast::Scope {
            statements: v,
        }
    }
};

Statement: ast::Statement = {
    Box<Node<VariableDecl>> => ast::Statement::VariableDecl(<>),
    Expression => ast::Statement::Expression(<>),
};

VariableDecl: ast::VariableDecl = {
    "let" <DeclPattern> <("=" <Expression>)?> => {
        let (p, e) = (<>);
        ast::VariableDecl {
            pattern: p,
            expression: e,
        }
    },
};

DeclPattern: ast::DeclPattern = {
    Identifier => ast::DeclPattern::Identifier(<>),
    "(" <Comma<DeclPattern>> <".."?> ")" => {
        let (v, b) = (<>);
        ast::DeclPattern::Tuple(v, b.is_some())
    },
    "[" <Comma<DeclPattern>> <".."?> "]" => {
        let (v, b) = (<>);
        ast::DeclPattern::Array(v, b.is_some())
    },
    "<" <Comma<Identifier>> <".."?> ">" => {
        let (v, b) = (<>);
        ast::DeclPattern::Simd(v, b.is_some())
    },
    "{" <Comma<(Identifier (":" <DeclPattern>)?)>> "}" => {
        ast::DeclPattern::Object(<>.into_iter().collect())
    },
};

Expression = Node<InnerExpression>;

InnerExpression: ast::Expression = {
    Box<Scope> => ast::Expression::Scope(<>),
    Box<Lambda> => ast::Expression::Lambda(<>),
    BinaryOperators,
    
    AssignmentOp,
    Throw,
    Break,
    Continue,
    Return,
    Box<IfExpression> => ast::Expression::If(<>),
    Box<MatchExpression> => ast::Expression::Literal(Box::new(ast::Literal::Nil)),
    Box<LoopExpression> => ast::Expression::Literal(Box::new(ast::Literal::Nil)),
    Box<WhileExpression> => ast::Expression::Literal(Box::new(ast::Literal::Nil)),
    Box<ForExpression> => ast::Expression::For(<>),
};

AssignmentOp: ast::Expression = {
    Node<AssignPattern> AssignOps Expression => {
        let (lhs, op, rhs) = (<>);
        ast::Expression::AssignmentOp(Box::new(ast::AssignmentOp {
            lhs: lhs,
            rhs: rhs,
            operator: op,
        }))
    },
};

AssignPattern: ast::Expression = {
    DereferenceImp<IdentifierExpr>,
};

Throw: ast::Expression = {
    "throw" <Box<Expression>> => ast::Expression::Throw(<>),
};

Break: ast::Expression = {
    "break" <Identifier?> <(":" <Expression>)?> => {
        let (l, v) = (<>);
        ast::Expression::Break(Box::new(ast::Break {
            label: l,
            value: v,
        }))
    },
};

Continue: ast::Expression = {
    "continue" <Identifier?> => {
        ast::Expression::Continue(Box::new(ast::Continue {
            label: <>,
        }))
    },
};

Return: ast::Expression = {
    "return" <Box<Expression>> => ast::Expression::Return(<>),
};

IfExpression: ast::IfChain = {
    IfChain => {
        let mut chain = <>;
        chain.items.reverse();
        chain
    },
};

IfChain: ast::IfChain = {
    "if" <Node<(Expression Scope ElseTail?)>> => {
        let node = <>;
        let (l, (c, s, t), r) = node.unwrap();
        let item = ast::IfItem {
            condition: c,
            //binding: None,
            block: s,
        };
        let mut chain = t.unwrap_or_default();
        chain.items.push((l, item, r).into());
        chain
    },
    "if" "let" <MatchPattern> "=" <Expression> <Scope> <ElseTail?> => unimplemented!(),
};

ElseTail: ast::IfChain = {
    "else" <IfExpression>,
    "else" <Scope> => {
        ast::IfChain {
            items: vec![],
            else_block: Some(<>),
        }
    },
};

MatchExpression: () = {
    "match" Expression "{" Comma<MatchItem> "}" => (),
};

MatchItem: () = {
    <MatchPattern> "=>" <Expression> => (),
};

MatchPattern = Node<MatchPatternInner>;
MatchPatternInner: ast::MatchPattern = {
    Identifier => match syms.lookup_str(<>) {
        Some("_") => ast::MatchPattern::Any,
        _ => ast::MatchPattern::Variable(<>),
    },
    ".." => ast::MatchPattern::AnySplat,
    SimpleLiteral => ast::MatchPattern::Literal(<>),
    <TypeName?> "(" <Comma<MatchPattern>> ")" => {
        let (t, i) = (<>);
        ast::MatchPattern::Tuple {
            enum_type: t,
            items: i,
        }   
    },
    <TypeName?> "{" <Comma<Node<(Identifier (":" <MatchPattern>)?)>>> "}" => {
        let (t, i) = (<>);
        ast::MatchPattern::Object {
            object_type: t,
            items: i,
        }
    },
    "[" <Comma<MatchPattern>> "]" => ast::MatchPattern::Array(<>),
    "<" <Comma<MatchPattern>> ">" => ast::MatchPattern::Simd(<>),
};

LoopExpression: () = {
    (Identifier ":")? "loop" Scope => (),
};

WhileExpression: () = {
    (Identifier ":")? "while" Expression Scope LoopElse? => (),
    (Identifier ":")? "while" "let" MatchPattern "=" Expression Scope LoopElse? => (),
};

ForExpression: ast::ForLoop = {
    (<Identifier> ":")? "for" DeclPattern "in" Expression Scope LoopElse? => {
        let (label, _, binding, _, expr, body, elseb) = (<>);
        ast::ForLoop {
            label: label,
            binding: binding,
            expression: expr,
            body: body,
            else_body: elseb,
        }
    },
};

LoopElse = "else" <Scope>;

Lambda: ast::Lambda = {
    LambdaHeader "?"? Expression => {
        let (p, t, b) = (<>);
        ast::Lambda {
            parameters: p,
            body: b,
            throws: t.is_some(),
        }
    },
};

// Returns the list of parameter names
LambdaHeader: Vec<Sym> = {
    "||" => vec![],
    "|" <Comma<Identifier>> "|",
};

AssignOps: ast::AssignOp = {
    "=" => ast::AssignOp::Assign,
    "||=" => ast::AssignOp::LogicalOr,
    "&&=" => ast::AssignOp::LogicalAnd,
    "|=" => ast::AssignOp::BitOr,
    "&=" => ast::AssignOp::BitAnd,
    "^=" => ast::AssignOp::BitXor,
    "<<=" => ast::AssignOp::LShiftLeft,
    ">>=" => ast::AssignOp::AShiftRight,
    ">>>=" => ast::AssignOp::LShiftRight,
    "+=" => ast::AssignOp::Add,
    "-=" => ast::AssignOp::Sub,
    "*=" => ast::AssignOp::Mul,
    "/=" => ast::AssignOp::Div,
    "%=" => ast::AssignOp::Rem,
    "mod=" => ast::AssignOp::Mod,
};

ImplOp: ast::BinOp = {
    "impls" => ast::BinOp::Implements,
};

RangeOps: ast::BinOp = {
    ".." => ast::BinOp::RangeExclusive,
    "..." => ast::BinOp::RangeInclusive,
};

LogicalOr: ast::BinOp = {
    "||" => ast::BinOp::LogicalOr
};

LogicalAnd: ast::BinOp = {
    "&&" => ast::BinOp::LogicalAnd
};

EqualOps: ast::BinOp = {
    "==" => ast::BinOp::Equal,
    "!=" => ast::BinOp::NotEqual,
    "<" => ast::BinOp::LessThan,
    ">" => ast::BinOp::GreaterThan,
    "<=" => ast::BinOp::LessOrEqual,
    ">=" => ast::BinOp::GreaterOrEqual,
};

BitOps: ast::BinOp = {
    "&" => ast::BinOp::BitAnd,
    "|" => ast::BinOp::BitOr,
    "^" => ast::BinOp::BitXor,
};

ShiftOps: ast::BinOp = {
    "<<" => ast::BinOp::LShiftLeft,
    ">>" => ast::BinOp::AShiftRight,
    ">>>" => ast::BinOp::LShiftRight,
};

AddSubOps: ast::BinOp = {
    "+" => ast::BinOp::Add,
    "-" => ast::BinOp::Sub,
};

MulDivOps: ast::BinOp = {
    "*" => ast::BinOp::Mul,
    "/" => ast::BinOp::Div,
    "%" => ast::BinOp::Rem,
    "/%" => ast::BinOp::DivRem,
    "mod" => ast::BinOp::Mod,
};

BinaryOperators = ImplOperator;
ImplOperator = Tier<ImplOp, RangeOperators>;
RangeOperators = Tier<RangeOps, LogicalOperators>;
LogicalOperators = Tier<LogicalOr, Tier<LogicalAnd, EqualityOperators>>;
EqualityOperators = Tier<EqualOps, BitwiseOperators>;
BitwiseOperators = Tier<BitOps, ShiftOperators>;
ShiftOperators = Tier<ShiftOps, AddSubOperators>;
AddSubOperators = Tier<AddSubOps, MulDivOperators>;
MulDivOperators = Tier<MulDivOps, UnaryOperators>;

UnaryOperators: ast::Expression = {
    "-" <Box<Node<UnaryOperators>>> => ast::Expression::Negate(<>),
    "!" <Box<Node<UnaryOperators>>> => ast::Expression::Not(<>),
    <Box<Node<Dereference>>> "?" => ast::Expression::Try(<>),

    Dereference,
};

Dereference = DereferenceImp<Term>;
DereferenceImp<N>: ast::Expression = {
    <Node<Dereference>> "." <Identifier> => {
        let (lhs, rhs) = (<>);
        ast::Expression::MemberAccess(Box::new(ast::MemberAccess {
            lhs: lhs,
            rhs: rhs,
        }))
    },
    <Node<Dereference>> "." <DecIntegerLiteral> => {
        let (lhs, rhs) = (<>);
        ast::Expression::TupleAccess(Box::new(ast::TupleAccess {
            lhs: lhs,
            rhs: rhs,
        }))
    },
    <Node<Dereference>> "(" <Comma<Expression>> ")" => {
        let (lhs, rhs) = (<>);
        ast::Expression::FunctionCall(Box::new(ast::FunctionCall {
            lhs: lhs,
            parameters: rhs,
        }))
    },
    <Node<Dereference>> "[" <Comma<Expression>> "]" => {
        let (lhs, rhs) = (<>);
        ast::Expression::ArrayIndex(Box::new(ast::ArrayIndex {
            lhs: lhs,
            indices: rhs,
        }))
    },
    N,
};

#[inline]
TypeName: ast::TypeName = {
    (<Identifier> ".")* Identifier => {
        let (mut v, i) = (<>);
        v.push(i);
        ast::TypeName {
            parts: v,
        }
    },
};

Term: ast::Expression = {
    "(" <InnerExpression> ")",
    IdentifierExpr,
    Literal Identifier? => {
        let (e, i) = (<>);
        match i {
            None => ast::Expression::Literal(Box::new(e)),
            Some(i) => ast::Expression::UserSuffix(Box::new(ast::UserSuffix {
                value: e,
                suffix: i,
            })),
        }
    },
    Tuple,
};

Tuple: ast::Expression = {
    "(" ")" => ast::Expression::EmptyTuple, // empty tuple
    "(" <Expression> "," <Comma<Expression>> ")" => {
        let (e, mut v) = (<>);
        v.insert(0, e);
        ast::Expression::Tuple(Box::new(v))
    }
};

Literal: ast::Literal = {
    SimpleLiteral,
    SimdLiteral,
    ObjectLiteral,
    ArrayLiteral,
};

SimpleLiteral: ast::Literal = {
    IntegerLiteral => ast::Literal::Integer(<>),
    FloatLiteral => ast::Literal::Float(<>),
    StringLiteral => ast::Literal::String(<>),
    Label => ast::Literal::Label(<>),
    "nil" => ast::Literal::Nil,
};

ObjectLiteral: ast::Literal = {
    "new" <TypeName?> "{" <Comma<ObjectLiteralItem>> "}" => {
        let (ty, items) = (<>);
        let mut map = BTreeMap::new();
        for (k, v) in items {
            map.insert(k, v);
        }
        ast::Literal::ObjectLiteral(ty, map)
    },
};

ObjectLiteralItem: (Sym, Option<ast::ExprNode>) = {
     LF* <Identifier> <(":" <Expression>)?> LF* => (<>),
};

ArrayLiteral: ast::Literal = {
    "[" <Comma<Expression>> "]" => ast::Literal::ArrayLiteral(<>),
    "[" <Expression> ";" <Expression> "]" => ast::Literal::ArraySplat(<>),
};

SimdLiteral: ast::Literal = {
    "<" <Comma<Node<BitwiseOperators>>> ">" => ast::Literal::SimdLiteral(<>),
};

IntegerLiteral: i64 = {
    DecIntegerLiteral,
    HEX_LITERAL => parse_int(&<>[2..], 16),
    OCT_LITERAL => parse_int(&<>[2..], 8),
    BIN_LITERAL => parse_int(&<>[2..], 2),
};

DecIntegerLiteral: i64 = {
    INT_LITERAL => parse_int(<>, 10),
};

FloatLiteral: f64 = {
    FLOAT_LITERAL => parse_float(<>),
};

// TODO: Parse string literal into actual string data
StringLiteral: String = {
    STR_LITERAL => {
        parse_literal(<>).unwrap().into_owned()
    }
};

Identifier: Sym = IDENTIFIER => syms.intern(<>);
Label: Sym = LABEL => syms.intern(&<>[1..]);
DocComment: String = {
    DOC_COMMENT => <>.into(),
};
ModDocComment: String = {
    MOD_DOC_COMMENT => <>.into(),
};

IdentifierExpr: ast::Expression = {
    Identifier => ast::Expression::NamedReference(<>),
};

End: () = {
    LF => (),
    ";" => (),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op, NextTier>: ast::Expression = {
    Node<Tier<Op, NextTier>> Op Node<NextTier> => {
        let (lhs, op, rhs) = (<>);
        let op = ast::BinaryOp {
            lhs: lhs,
            rhs: rhs,
            operator: op
        };
        ast::Expression::BinaryOp(Box::new(op))
    },
    NextTier
};

Node<T>: ast::Node<T> = {
    @L T @R => (<>).into()
};

Box<T>: Box<T> = {
    T => Box::new(<>)
};

extern {
    type Location = lexer::Location;
    type Error = lexer::LexicalError;

    enum lexer::Tok<'input> {
        "break" => (TT::Break, <&'input str>),
        "const" => (TT::Const, <&'input str>),
        "continue" => (TT::Continue, <&'input str>),
        "else" => (TT::Else, <&'input str>),
        "enum" => (TT::Enum, <&'input str>),
        "extern" => (TT::Extern, <&'input str>),
        "fn" => (TT::Function, <&'input str>),
        "for" => (TT::For, <&'input str>),
        "if" => (TT::If, <&'input str>),
        "impl" => (TT::Impl, <&'input str>),
        "impls" => (TT::Impls, <&'input str>),
        "in" => (TT::In, <&'input str>),
        "let" => (TT::Let, <&'input str>),
        "loop" => (TT::Loop, <&'input str>),
        "match" => (TT::Match, <&'input str>),
        "mod" => (TT::Mod, <&'input str>),
        "new" => (TT::New, <&'input str>),
        "nil" => (TT::Nil, <&'input str>),
        "return" => (TT::Return, <&'input str>),
        "struct" => (TT::Struct, <&'input str>),
        "throw" => (TT::Throw, <&'input str>),
        "trait" => (TT::Trait, <&'input str>),
        "type" => (TT::Type, <&'input str>),
        "use" => (TT::Use, <&'input str>),
        "while" => (TT::While, <&'input str>),

        "{" => (TT::OpenCurly, <&'input str>),
        "}" => (TT::CloseCurly, <&'input str>),
        "(" => (TT::OpenParen, <&'input str>),
        ")" => (TT::CloseParen, <&'input str>),
        "[" => (TT::OpenBracket, <&'input str>),
        "]" => (TT::CloseBracket, <&'input str>),
        ";" => (TT::Semicolon, <&'input str>),
        ":" => (TT::Colon, <&'input str>),
        "," => (TT::Comma, <&'input str>),
        "?" => (TT::Question, <&'input str>),
        "." => (TT::Dot, <&'input str>),
        "=>" => (TT::FatArrow, <&'input str>),

        ".." => (TT::RangeExclusive, <&'input str>),
        "..." => (TT::RangeInclusive, <&'input str>),

        "==" => (TT::Equal, <&'input str>),
        "!=" => (TT::NotEqual, <&'input str>),
        "<" => (TT::LessThan, <&'input str>),
        "<=" => (TT::LessOrEqual, <&'input str>),
        ">" => (TT::GreaterThan, <&'input str>),
        ">=" => (TT::GreaterOrEqual, <&'input str>),

        "!" => (TT::Not, <&'input str>),
        "~" => (TT::Tilde, <&'input str>),
        "@" => (TT::At, <&'input str>),

        "&&" => (TT::LogicalAnd, <&'input str>),
        "||" => (TT::LogicalOr, <&'input str>),
        "&&=" => (TT::LogicalAndAssign, <&'input str>),
        "||=" => (TT::LogicalOrAssign, <&'input str>),

        "+" => (TT::Add, <&'input str>),
        "-" => (TT::Sub, <&'input str>),
        "*" => (TT::Mul, <&'input str>),
        "/" => (TT::Div, <&'input str>),
        "%" => (TT::Rem, <&'input str>),
        "/%" => (TT::DivRem, <&'input str>),
        "&" => (TT::BitAnd, <&'input str>),
        "|" => (TT::BitOr, <&'input str>),
        "^" => (TT::BitXor, <&'input str>),
        "<<" => (TT::Shl, <&'input str>),
        ">>" => (TT::Shr, <&'input str>),
        ">>>" => (TT::LShr, <&'input str>),

        "=" => (TT::Assign, <&'input str>),
        "+=" => (TT::AddAssign, <&'input str>),
        "-=" => (TT::SubAssign, <&'input str>),
        "*=" => (TT::MulAssign, <&'input str>),
        "/=" => (TT::DivAssign, <&'input str>),
        "%=" => (TT::RemAssign, <&'input str>),
        "&=" => (TT::BitAndAssign, <&'input str>),
        "|=" => (TT::BitOrAssign, <&'input str>),
        "^=" => (TT::BitXorAssign, <&'input str>),
        "<<=" => (TT::ShlAssign, <&'input str>),
        ">>=" => (TT::ShrAssign, <&'input str>),
        ">>>=" => (TT::LShrAssign, <&'input str>),
        "mod=" => (TT::ModAssign, <&'input str>),

        LF => (TT::NewLine, <&'input str>),
        DOC_COMMENT => (TT::DocComment, <&'input str>),
        MOD_DOC_COMMENT => (TT::ModuleDocComment, <&'input str>),
        IDENTIFIER => (TT::Identifier, <&'input str>),
        INT_LITERAL => (TT::IntLiteral, <&'input str>),
        HEX_LITERAL => (TT::HexLiteral, <&'input str>),
        OCT_LITERAL => (TT::OctLiteral, <&'input str>),
        BIN_LITERAL => (TT::BinLiteral, <&'input str>),
        FLOAT_LITERAL => (TT::FloatLiteral, <&'input str>),
        STR_LITERAL => (TT::StringLiteral, <&'input str>),
        CHAR_LITERAL => (TT::CharLiteral, <&'input str>),
        LABEL => (TT::Label, <&'input str>),
    }
}
